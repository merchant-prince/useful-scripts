#! /usr/bin/env python


import sys
import argparse
from subprocess import run, Popen, PIPE

from modules.Print import Print




class Commands:
    """
    This class is used to create docker commands
    """

    MAIN = {
            "CONTAINERS": ["docker", "container"],
            "IMAGES"    : ["docker", "image"],
            "VOLUMES"   : ["docker", "volume"],
            "NETWORKS"  : ["docker", "network"]
    }

    OPTIONS = {
            "ALL"    : "--all",
            "QUIET"  : "--quiet",
            "FORCE"  : "--force",
            "VOLUMES": "--volumes"
    }

    @staticmethod
    def checkCommandsAndOptions(command, options):
        """
        Checks if the command, and options exist in the MAIN,
        and OPTIONS dictionaries.

        Arguments:
        ----------

        command: string
            One of the keys of the MAIN dictionary
            e.g.: "VOLUMES"

        options: array<string>
            An array of the keys present in the OPTIONS dictionary
            e.g.: ["ALL", "FORCE"]
        """

        if (command not in Commands.MAIN.keys()) or (options and not set(options).issubset(set(Commands.OPTIONS.keys()))):
            raise RuntimeError("The command and/or options-list provided is incorrect")

    @staticmethod
    def list(command, options=[]):
        """
        Creates a command to list docker containers, images, volumes,
        or networks.

        Arguments:
        ----------

        command: string
            One of the keys of the MAIN dictionary
            e.g.: "VOLUMES"

        options: array<string>
            An array of the keys present in the OPTIONS dictionary
            e.g.: ["ALL", "FORCE"]

        Return: array<sring>
        -------
        """

        Commands.checkCommandsAndOptions(command, options)

        finalCommand = Commands.MAIN[command].copy()

        finalCommand.append("ls")

        for option in options:
            finalCommand.append(Commands.OPTIONS[option])

        return finalCommand

    @staticmethod
    def remove(command, options=[], ids=[]):
        """
        Creates a command to remove docker containers, images, volumes,
        or networks.

        Arguments:
        ----------

        command: string
            One of the keys of the MAIN dictionary
            e.g.: "VOLUMES"

        options: array<string>
            An array of the keys present in the OPTIONS dictionary
            e.g.: ["ALL", "FORCE"]

        ids: array<string>
            An array of the id of containers, images, networks, and volumes to
            remove.
            e.g.: ["oedldf234d", "eudj3ser23", "5efs3s2sr5"]

        Return: array<sring>
        -------
        """

        Commands.checkCommandsAndOptions(command, options)

        finalCommand = Commands.MAIN[command].copy()

        finalCommand.append("rm")

        for option in options:
            finalCommand.append(Commands.OPTIONS[option])

        for containerId in ids:
            finalCommand.append(containerId)

        return finalCommand




class Utils:
    @staticmethod
    def getIds(listCommand):
        """
        Gets the Ids of containers, images, networks, and volumes from a list
        command.

        Arguments:
        ----------

        listCommand: array<string>
            A command created using (or similar to) Commands.list(...)
            e.g.: ["docker", "image", "ls", "--all", "--quiet"]

        Return: array<sring>
        -------
        """

        return [containerId.strip() for containerId in Popen(listCommand,
                                                             stdout=PIPE,
                                                             bufsize=1,
                                                             universal_newlines=True).stdout]

    @staticmethod
    def has(listCommand):
        """
        A convenience method to check if a list command returns any containers,
        images, networks, or volumes Ids.

        Arguments:
        ----------

        listCommand: array<string>
            A command created using (or similar to) Commands.list(...)
            e.g.: ["docker", "image", "ls", "--all", "--quiet"]

        Return: array<sring>
        -------
        """

        return bool(Utils.getIds(listCommand))




class View:
    """
    A convenience meta-class used to list the ids of containers, images,
    volumes, or networks.
    """

    def __getattr__(self, commandName):
        if commandName == "CONTAINERS":
            Print.info("Checking containers...")
            Print.eol(2)

            if Utils.has(Commands.list(commandName, ["ALL", "QUIET"])):
                run(Commands.list(commandName, ["ALL"]))
                Print.eol(2)
            else:
                Print.success("No containers present on the machine!")
                Print.eol(2)

        elif commandName == "IMAGES":
            Print.info("Checking images...")
            Print.eol(2)

            if Utils.has(Commands.list(commandName, ["ALL", "QUIET"])):
                run(Commands.list(commandName, ["ALL"]))
                Print.eol(2)
            else:
                Print.success("No images present of the machine!")
                Print.eol(2)

        elif commandName == "VOLUMES":
            Print.info("Checking volumes...")
            Print.eol(2)

            if Utils.has(Commands.list(commandName, ["QUIET"])):
                run(Commands.list(commandName))
                Print.eol(2)
            else:
                Print.success("No volumes present on the machine!")
                Print.eol(2)

        elif commandName == "NETWORKS":
            Print.info("Checking networks...")
            Print.eol(2)

            if Utils.has(Commands.list(commandName, ["QUIET"])):
                run(Commands.list(commandName))
                Print.eol(2)
            else:
                Print.success("No networks present on the machine!")
                Print.eol(2)




class Remove:
    """
    A convenience meta-class used to remove the ids of containers, images,
    volumes, or networks.
    """

    def __getattr__(self, commandName):
        if commandName == "CONTAINERS":
            Print.warning("Removing containers...")
            Print.eol(2)

            containersIds = Utils.getIds(Commands.list(commandName, ["ALL", "QUIET"]))

            if containersIds:
                run(Commands.remove(commandName, ["FORCE", "VOLUMES"], containersIds))
                Print.eol(2)
                Print.success("Containers removed!")
                Print.eol(2)
            else:
                Print.success("No containers present on the machine!")
                Print.eol(2)

        elif commandName == "IMAGES":
            Print.warning("Removing images...")
            Print.eol(2)

            imagesIds = Utils.getIds(Commands.list(commandName, ["ALL", "QUIET"]))

            if imagesIds:
                run(Commands.remove(commandName, ["FORCE"], imagesIds))
                Print.eol(2)
                Print.success("Images removed!")
                Print.eol(2)
            else:
                Print.success("No images present on the machine!")
                Print.eol(2)

        elif commandName == "VOLUMES":
            Print.warning("Removing volumes...")
            Print.eol(2)

            volumesNames = Utils.getIds(Commands.list(commandName, ["QUIET"]))

            if volumesNames:
                run(Commands.remove(commandName, ["FORCE"], volumesNames))
                Print.eol(2)
                Print.success("Volumes removed!")
                Print.eol(2)
            else:
                Print.success("No volumes present on the machine!")
                Print.eol(2)

        elif commandName == "NETWORKS":
            Print.warning("Removing networks...")
            Print.eol(2)

            networksIds = Utils.getIds(Commands.list(commandName, ["QUIET"]))

            if networksIds:
                run(Commands.remove(commandName, [], networksIds))
                Print.eol(2)
                Print.success("Networks removed!")
                Print.eol(2)
            else:
                Print.success("No networks present on the machine!")
                Print.eol(2)




class Docker:
    """
    A meta-class to encapsulate the above classes
    """

    def __init__(self):
        self.view = View()
        self.remove = Remove()

    def status(self):
        Print.eol()

        self.view.CONTAINERS
        self.view.IMAGES
        self.view.VOLUMES
        self.view.NETWORKS

    def purge(self):
        Print.eol()

        self.remove.CONTAINERS
        self.remove.IMAGES
        self.remove.VOLUMES
        self.remove.NETWORKS




if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="A script to check the status of, and remove docker containers, images, volumes, and networks.")

    parser.add_argument("action", choices=["status", "purge"], help="The action to be carried out by the script")

    arguments = parser.parse_args()

    docker = Docker()

    if arguments.action == "status":
        docker.status()

    elif arguments.action == "purge":
        docker.purge()
