#! /usr/bin/env python


import re
import os
import sys
import stat
import argparse
from subprocess import run

from modules.cd import cd
from modules.Git import Git
from modules.Print import Print
from modules.Utils import Check
from modules.Template import Template
from modules.DirectoryStructure import DirectoryStructure




if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="A script to automate the installation of a Laravel project.")

    subparsers = parser.add_subparsers(dest="actions")
    new_command = subparsers.add_parser("new", help="Install a new laravel application in the current directory.")

    new_command.add_argument("name", help="The project name (should be PascalCased).")

    arguments = parser.parse_args()

    if arguments.actions == "new":

        """
        Variables
        """

        project = {
                "name": arguments.name,
                "uri": "laravel.local"
        }

        user = {
                "id": os.geteuid()
        }

        group = {
                "id": os.getegid()
        }

        database = {
                "name": project["name"].lower(),
                "username": "username",
                "password": "password"
        }

        mail = {
                "driver": "smtp",
                "server": "smtp.mailtrap.io",
                "port": 2525,
                "username": "558119fcb320fa",
                "password": "9e0ea8073accb9",
                "encryption": "null"
        }

        templatesPath = f"{os.path.dirname(os.path.realpath(__file__))}/templates/laravel"

        """
        Run
        """

        Print.eol()

        check = Check(project["name"])

        Print.info("Checking base project criteria...")
        Print.eol(2)

        if not check.nameIsPascalCased():
            Print.error("The project name is not PascalCased.")
            Print.eol(2)
            sys.exit(1)

        if check.projectExists():
            Print.error("Another project with the same name exists in the current directory.")
            Print.eol(2)
            sys.exit(1)

        Print.info("Creating the directory structure of the project.")
        DirectoryStructure({
            project["name"]: {
                "configuration": {
                    "nginx": {}
                },
                "certificate": {
                    "ssl": {}
                },
                "dockerfile": {
                    "php": {}
                },
                "application": {}
            }
        })
        Print.ok()
        Print.eol(2)

        Print.info("Going to the project root.")
        Print.eol(2)
        with cd(project["name"]):
            with cd("certificate/ssl"):
                Print.info("Creating docker openssl image.")
                Print.eol(2)
                run(["docker", "build", "--tag", "laravel-openssl",
                                        "-"
                    ], input=str(Template(f"{templatesPath}/openssl-dockerfile.template").replace({
                    })), encoding="ascii", check=True)

                Print.eol()
                Print.success("Created docker openssl image.")
                Print.eol(2)

                Print.info("Generating ssl certificates.")
                Print.eol(2)
                run(["docker", "run", "--rm",
                                      "--interactive",
                                      "--tty",
                                      "--mount", f"type=bind,source={os.getcwd()},target=/certificates",
                                      "--user", f"{user['id']}:{group['id']}",
                                      "laravel-openssl", "req", "-x509",
                                                         "-newkey",
                                                         "rsa:4096",
                                                         "-keyout", "key.pem",
                                                         "-out", "certificate.pem",
                                                         "-days", "365",
                                                         "-nodes",
                                                         "-sha256",
                                                         "-subj", ("/C=MU"
                                                                   "/ST=Pamplemousses"
                                                                   "/L=Piton"
                                                                   "/O=Redshift"
                                                                   "/OU=IT"
                                                                   f"/CN={project['uri']}")
                ], check=True)
                Print.eol()
                Print.success("SSL certificates generated.")
                Print.eol(2)

            Print.info("Generating the nginx configuration file.")
            with cd("configuration/nginx"):
                Template(f"{templatesPath}/nginx.conf.template").replace({
                    "projectUri": project["uri"]
                }).write(f"{project['uri']}.conf")
            Print.ok()
            Print.eol(2)

            Print.info("Generating the php dockerfile.")
            with cd("dockerfile/php"):
                Template(f"{templatesPath}/php-dockerfile.template").replace({
                    "userId": user["id"],
                    "groupId": group["id"]
                }).write("Dockerfile")
            Print.ok()
            Print.eol(2)

            Print.info("Generating docker-compose file.")
            Template(f"{templatesPath}/docker-compose.yml.template").replace({
                "projectUri": project["uri"],
                "projectName": project["name"],
                "userId": user["id"],
                "groupId": group["id"],
                "databaseName": database["name"],
                "databaseUsername": database["username"],
                "databasePassword": database["password"]
            }).write("docker-compose.yml")
            Print.ok()
            Print.eol(2)

            Print.info("Generating the run binary.")
            Template(f"{templatesPath}/run.template").replace({
                "userId": user["id"],
                "groupId": group["id"],
                "projectName": project["name"]
            }).write("run")
            os.chmod("run", os.stat("run").st_mode | stat.S_IEXEC)
            Print.ok()
            Print.eol(2)

            Print.info("Pulling a fresh laravel application.")
            Print.eol(2)
            with cd("application"):
                run(["docker", "run", "--rm",
                                      "--interactive",
                                      "--tty",
                                      "--user", f"{user['id']}:{group['id']}",
                                      "--mount", f"type=bind,source={os.getcwd()},target=/app",
                                      "composer", "create-project", "--prefer-dist",
                                                                    "--ignore-platform-reqs",
                                                                    "laravel/laravel", project["name"]
                ])
            Print.eol()
            Print.success("Pulled a fresh laravel application.")
            Print.eol(2)

            Print.eol(1)
            Print.info("Initializing a git repository for the project.")
            Print.eol(2)
            Git.init()
            Print.eol(2)
            Print.success("Initialized a git repository for project.")
            Print.eol(2)

            # Get the application key
            with open(f"application/{project['name']}/.env") as envFile:
                for line in envFile:
                    if re.search("APP_KEY", line):
                        applicationKey = re.findall("APP_KEY=(.*)", line.strip())[0]
                        break

            Template(f"{templatesPath}/env.template").replace({
                "projectName": project["name"],
                "applicationKey": applicationKey,
                "projectUri": project["uri"],
                "databaseName": database["name"],
                "databaseUsername": database["username"],
                "databasePassword": database["password"],
                "mailDriver": mail["driver"],
                "mailServer": mail["server"],
                "mailPort": mail["port"],
                "mailUsername": mail["username"],
                "mailPassword": mail["password"],
                "mailEncryption": mail["encryption"],
            }).write(f"application/{project['name']}/.env")

            Print.success(f"Your project is now available at: https://{project['uri']}.")
            Print.eol(2)
