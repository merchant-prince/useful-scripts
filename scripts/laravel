#! /usr/bin/env python


import re
import os
import sys
import stat
import argparse
from subprocess import run
from urllib.parse import urlparse

from modules.cd import cd
from modules.Print import Print
from modules.DirectoryStructure import DirectoryStructure




if __name__ == "__main__":

    # Constants
    SETUP_ACTION = "setup"
    DEFAULT_PROJECT_DOMAIN = "laravel.local"

    # Argument parsing
    parser = argparse.ArgumentParser(description="A script to setup a Laravel application.")

    subparsers = parser.add_subparsers(dest="action")

    setup_action = subparsers.add_parser(SETUP_ACTION, help="Install a new laravel application in the current directory.")

    setup_action.add_argument("name", help="The project name (should be PascalCased).")
    setup_action.add_argument("--domain", default=DEFAULT_PROJECT_DOMAIN, help=f"The project domain (default: {DEFAULT_PROJECT_DOMAIN}).")
    setup_action.add_argument("--dev", action="store_true", default=False, help="Install the development version of laravel.")

    arguments = parser.parse_args()


    if arguments.action == SETUP_ACTION:

        """
        Variables
        """

        project = {
            "name": arguments.name,
            "domain": arguments.domain,
            "laravel": {
                "dev": arguments.dev
            }
        }

        user = {
            "id": os.geteuid()
        }

        group = {
            "id": os.getegid()
        }

        ssl = {
            "key": "key.pem",
            "certificate": "certificate.pem"
        }

        database = {
            "name": project["name"].lower(),
            "username": "username",
            "password": "password"
        }

        mail = {
            "mailer": "smtp",
            "host": "smtp.mailtrap.io",
            "port": 2525,
            "username": "558119fcb320fa",
            "password": "9e0ea8073accb9",
            "encryption": "null",
            "from": {
                "address": f"{project['name'].lower()}@{project['domain']}"
            }
        }


        """
        Base Checks
        """

        Print.eol()
        Print.info("Checking base project criteria")

        if not bool(re.match('^[A-Z][a-z]+(?:[A-Z][a-z]+)*$', project["name"])):
            Print.fail()
            Print.eol(2)
            Print.error("The project name is not PascalCased.")
            Print.eol(2)
            sys.exit(1)

        if (os.path.isdir(project["name"]) if project["name"] in os.listdir() else False):
            Print.fail()
            Print.eol(2)
            Print.error("Another project with the same name exists in the current directory.")
            Print.eol(2)
            sys.exit(1)

        if project["domain"] != DEFAULT_PROJECT_DOMAIN:
            if urlparse(f"http://{project['domain']}").netloc != project["domain"]:
                Print.eol()
                Print.error(f"{project['domain']} is an invalid domain.")
                Print.eol(2)
                sys.exit(1)

        Print.ok()
        Print.eol(2)


        """
        Templates
        """

        OPENSSL_DOCKERFILE = """\
FROM debian:latest

RUN apt-get update && apt-get install -y openssl

WORKDIR /certificates

VOLUME /certificates

ENTRYPOINT ["openssl"]
"""

        NGINX_CONFIGURATION = f"""\
###############
# APPLICATION #
###############

server {{
    listen 80 default_server;
    server_name {project['domain']};

    return 301 https://$server_name$request_uri;
}}

server {{
    listen 443 ssl;
    server_name {project['domain']};

    ssl_certificate /etc/nginx/ssl/{ssl['certificate']};
    ssl_certificate_key /etc/nginx/ssl/{ssl['key']};

    root /var/www/html/public;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    index index.html index.htm index.php;

    charset utf-8;

    location / {{
        try_files $uri $uri/ /index.php?$query_string;
    }}

    location = /favicon.ico {{ access_log off; log_not_found off; }}
    location = /robots.txt  {{ access_log off; log_not_found off; }}

    error_page 404 /index.php;

    location ~ \.php$ {{
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi_params;
    }}

    location ~ /\.(?!well-known).* {{
        deny all;
    }}
}}


###########
# ADMINER #
###########

server {{
    listen 8080;
    server_name {project['domain']};

    location / {{
        proxy_pass http://adminer:8080;
    }}
}}
"""

        SUPERVISOR_CONFIGURATION = """\
[supervisord]
user = root
nodaemon = true
logfile = /tmp/supervisord.log
pidfile = /tmp/supervisord.pid
loglevel = debug

[program:cron]
command = cron -f
autostart = true
autorestart = true

[program:php]
command = docker-php-entrypoint php-fpm
autostart = true
autorestart = true

# [program:horizon]
# user = www-data
# process_name = %(program_name)s
# command = php /var/www/html/artisan horizon
# autostart = true
# autorestart = true
# stopwaitsecs = 3600
"""

        PHP_DOCKERFILE = f"""\
FROM php:fpm

RUN apt-get update \\
 && apt-get install -y sudo supervisor libpq-dev libzip-dev cron zip \\
 && docker-php-ext-configure pgsql \\
 && docker-php-ext-configure zip \\
 && docker-php-ext-install bcmath pdo_pgsql pgsql pcntl zip \\
 && pecl install redis \\
 && docker-php-ext-enable redis \\
 && apt autoremove \\
 && rm -rf /var/lib/apt/lists/*

# Setup php.ini file
RUN mv "${{PHP_INI_DIR}}/php.ini-development" "${{PHP_INI_DIR}}/php.ini"

# Install crontab for the laravel scheduler
RUN echo "* * * * * www-data php /var/www/html/artisan schedule:run >> /dev/null 2>&1" >> /etc/crontab

# Install composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

###
# Change the UID and GID of the www-data so that there are no
# permission conflicts on the files manipulated by the container
# on the host.
###

ARG USER_ID={user['id']}
ARG GROUP_ID={group['id']}

RUN userdel -f www-data && \\
    if getent group www-data; \\
    then \\
      groupdel www-data; \\
    fi && \\
    groupadd -g ${{GROUP_ID}} www-data && \\
    useradd -l -u ${{USER_ID}} -g www-data www-data && \\
    install -d -m 0755 -o www-data -g www-data /home/www-data && \\
    chown --changes \\
          --silent \\
          --no-dereference \\
          --recursive \\
          --from=33:33 \\
          ${{USER_ID}}:${{GROUP_ID}} \\
            /home/www-data

# Setup privileges for www-data to start cron
RUN echo "www-data ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

USER www-data

CMD ["sudo", "/usr/bin/supervisord", "--configuration", "/etc/supervisor/conf.d/supervisord.conf"]
"""

        DOCKER_COMPOSE = f"""\
version: "3.7"

services:
    nginx:
        image: nginx:latest
        volumes:
            - ./configuration/nginx/conf/{project['domain']}.conf:/etc/nginx/conf.d/default.conf
            - ./configuration/nginx/ssl:/etc/nginx/ssl
            - ./application/{project['name']}:/var/www/html
        ports:
            - "80:80"
            - "443:443"
            - "8080:8080"
        depends_on:
            - php
        networks:
            nginx:
#             chromedriver:
#                 aliases:
#                     - laravel.local

    php:
        build:
            context: ./dockerfiles/php
            args:
                - USER_ID={user['id']}
                - GROUP_ID={group['id']}
        volumes:
            - ./application/{project['name']}:/var/www/html
            - ./configuration/supervisor/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf
        depends_on:
            - postgresql
            - redis
        networks:
            - nginx
            - postgresql
            - redis
#             - chromedriver

    postgresql:
        image: postgres:latest
        volumes:
            - postgresql:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: "{database['name']}"
            POSTGRES_USER: "{database['username']}"
            POSTGRES_PASSWORD: "{database['password']}"
        networks:
            - postgresql
            - adminer

    redis:
        image: redis:latest
        volumes:
            - redis:/data
        networks:
            - redis

    adminer:
        image: adminer:latest
        networks:
            - adminer
            - nginx

#     chromedriver:
#         image: robcherry/docker-chromedriver
#         depends_on:
#             - nginx
#         environment:
#             CHROMEDRIVER_WHITELISTED_IPS: ""
#             CHROMEDRIVER_PORT: "9515"
#         ports:
#             - "9515:9515"
#         networks:
#             - chromedriver
#         cap_add:
#             - "SYS_ADMIN"

networks:
    nginx:
    postgresql:
    redis:
    adminer:
#     chromedriver:

volumes:
    postgresql:
    redis:
"""

        RUN_BINARY = f"""\
#! /usr/bin/env python


import os
import sys
import argparse
from subprocess import run


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Perform common tasks on the application stack")

    parser.add_argument("tool", help="Define a tool to use on the application stack.", choices=("artisan", "composer", "yarn", "phpunit"))
    parser.add_argument("arguments", nargs=argparse.REMAINDER, help="Optional arguments to pass to the specified tool.")

    parsed = parser.parse_args()

    if parsed.tool == "artisan":
        run(["docker-compose", "exec", "php", "php", "artisan"] + parsed.arguments)

    elif parsed.tool == "composer":
        run(["docker-compose", "exec", "php", "composer"] + parsed.arguments)

    elif parsed.tool == "yarn":
        run(["docker", "run", "--rm",
                              "--interactive",
                              "--tty",
                              "--user", "{user['id']}:{group['id']}",
                              "--workdir", "/application",
                              "--mount", f"type=bind,source={{os.getcwd()}}/application/{project['name']},target=/application",
                              "node", "yarn"] + parsed.arguments)

    elif parsed.tool == "phpunit":
        run(["docker-compose", "exec", "php", "php", "./vendor/bin/phpunit"] + parsed.arguments)

    else:
        parser.print_help()
        sys.exit(1)
"""

        GITIGNORE = """\
*

!.gitignore
"""

        ENV = f"""\
APP_NAME={project['name']}
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=https://{project['domain']}

LOG_CHANNEL=stack

DB_CONNECTION=pgsql
DB_HOST=postgresql
DB_PORT=5432
DB_DATABASE={database['name']}
DB_USERNAME={database['username']}
DB_PASSWORD={database['password']}

BROADCAST_DRIVER=log
CACHE_DRIVER=redis
QUEUE_CONNECTION=redis
SESSION_DRIVER=redis
SESSION_LIFETIME=120

REDIS_HOST=redis
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER={mail['mailer']}
MAIL_HOST={mail['host']}
MAIL_PORT={mail['port']}
MAIL_USERNAME={mail['username']}
MAIL_PASSWORD={mail['password']}
MAIL_ENCRYPTION={mail['encryption']}
MAIL_FROM_ADDRESS={mail['from']['address']}
MAIL_FROM_NAME="${{APP_NAME}}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_APP_CLUSTER=mt1

MIX_PUSHER_APP_KEY="${{PUSHER_APP_KEY}}"
MIX_PUSHER_APP_CLUSTER="${{PUSHER_APP_CLUSTER}}"
"""


        """
        Run
        """

        Print.info("Creating the directory structure of the project")
        DirectoryStructure({
            project["name"]: {
                "configuration": {
                    "nginx": {
                        "conf": {},
                        "ssl": {}
                    },
                    "supervisor": {}
                },
                "dockerfiles": {
                    "php": {}
                },
                "application": {}
            }
        })
        Print.ok()
        Print.eol(2)


        with cd(project["name"]):
            with cd("configuration"):
                with cd("nginx"):
                    with cd("ssl"):
                        Print.info("Creating the docker openssl image...")
                        Print.eol(2)
                        run(["docker", "build", "--tag", "openssl:laravel", "-"], input=OPENSSL_DOCKERFILE, encoding="ascii", check=True)
                        Print.eol()
                        Print.success("Created docker openssl image.")
                        Print.eol(2)

                        Print.info("Generating ssl certificates...")
                        Print.eol(2)
                        run(["docker", "run", "--rm",
                                              "--interactive",
                                              "--tty",
                                              "--mount", f"type=bind,source={os.getcwd()},target=/certificates",
                                              "--user", f"{user['id']}:{group['id']}",
                                              "openssl:laravel", "req", "-x509",
                                                                 "-newkey", "rsa:4096",
                                                                 "-keyout", ssl["key"],
                                                                 "-out", ssl["certificate"],
                                                                 "-days", "365",
                                                                 "-nodes",
                                                                 "-sha256",
                                                                 "-subj", f"/CN={project['domain']}"
                        ], check=True)
                        Print.eol()
                        Print.success("SSL certificates generated.")
                        Print.eol(2)


                    with cd("conf"):
                        Print.info("Generating the nginx configuration file")
                        with open(f"{project['domain']}.conf", "w") as file:
                            file.write(NGINX_CONFIGURATION)
                        Print.ok()
                        Print.eol(2)


                with cd("supervisor"):
                    Print.info("Generating the supervisor configuration file")
                    with open("supervisord.conf", "w") as file:
                        file.write(SUPERVISOR_CONFIGURATION)
                    Print.ok()
                    Print.eol(2)


            with cd("dockerfiles/php"):
                Print.info("Generating the php dockerfile")
                with open("Dockerfile", "w") as file:
                    file.write(PHP_DOCKERFILE)
                Print.ok()
                Print.eol(2)


            Print.info("Generating the docker-compose file")
            with open("docker-compose.yml", "w") as file:
                file.write(DOCKER_COMPOSE)
            Print.ok()
            Print.eol(2)


            Print.info("Generating the run binary")
            with open("run", "w") as file:
                file.write(RUN_BINARY)
            os.chmod("run", os.stat("run").st_mode | stat.S_IEXEC)
            Print.ok()
            Print.eol(2)


            with cd("application"):
                Print.info("Initializing a .gitignore file for the application directory")

                with open(".gitignore", "w") as file:
                    file.write(GITIGNORE)
                Print.ok()
                Print.eol(2)


                Print.info("Pulling a fresh laravel application...")
                Print.eol(2)
                run(["docker", "run", "--rm",
                                      "--interactive",
                                      "--tty",
                                      "--user", f"{user['id']}:{group['id']}",
                                      "--mount", f"type=bind,source={os.getcwd()},target=/app",
                                      "composer", "create-project", "--prefer-dist",
                                                                    "--ignore-platform-reqs",
                                                                    "laravel/laravel", project["name"],
                                                                                       "dev-develop" if project["laravel"]["dev"] else ""])
                Print.eol()
                Print.success("Pulled a fresh laravel application.")
                Print.eol(2)


                with cd(project['name']):
                    Print.info("Backing up the .env file")
                    os.rename(".env", ".env.backup")
                    Print.ok()
                    Print.eol(2)

                    Print.info("Setting up a new .env file")
                    with open(".env", "w") as file:
                        file.write(ENV)
                    Print.ok()
                    Print.eol(2)


                    Print.eol(1)
                    Print.info("Initializing a git repository for the laravel project...")
                    Print.eol(2)
                    run(["git", "init"])
                    run(["git", "add", "."])
                    run(["git", "commit", "-m", "initial commit"])
                    run(["git", "checkout", "-b", "development"])
                    Print.eol(2)
                    Print.success("Initialized a git repository for the laravel project.")
                    Print.eol(2)

            Print.info("Initializing a git repository for the docker configuration...")
            Print.eol(2)
            run(["git", "init"])
            run(["git", "add", "."])
            run(["git", "commit", "-m", "initial commit"])
            run(["git", "checkout", "-b", "development"])
            Print.eol(2)
            Print.success("Initialized a git repository for the docker configuration.")
            Print.eol(2)


            """
            Post Installation
            """

            Print.info("Building docker-compose containers...")
            Print.eol(2)
            run(["docker-compose", "build"])
            Print.eol(2)
            Print.success("Built docker-compose containers.")
            Print.eol(2)

            Print.info("Generating a new application key...")
            Print.eol(2)
            run(["docker-compose", "run", "php", "php", "artisan", "key:generate"])
            run(["docker-compose", "down", "-v"])
            Print.eol(2)
            Print.success("Generated a new application key.")
            Print.eol(2)


            Print.success("The project is successfully set up.")
            Print.eol(2)
            Print.info(f"The application will be available at: https://{project['domain']}")
            Print.eol(2)
            Print.info(f"Adminer will be available at: http://{project['domain']}:8080")
            Print.eol(2)

    else:
        parser.print_help()
        sys.exit(0)
