#! /usr/bin/env python


"""
Imports
"""


import os
import stat
import argparse
from subprocess import run

from modules.cd import cd
from modules.Git import Git
from modules.Print import Print
from modules.Utils import Check
from modules.Template import Template
from modules.DirectoryStructure import DirectoryStructure


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="A script to automate the installation of a Laravel project.")
    subparsers = parser.add_subparsers(dest="actions")
    new_command = subparsers.add_parser("new", help="Install a new laravel application in the current directory")

    new_command.add_argument("name", help="The project name (should be PascalCased)")

    arguments = parser.parse_args()

    if arguments.actions == "new":

        """
        Variables
        """

        project = {
                "name": arguments.name,
                "uri": "dev.local"
        }

        user = {
                "id": os.geteuid()
        }

        group = {
                "id": os.getegid()
        }

        ssl = {
                "path": "/etc/nginx/ssl",
                "key": "key.pem",
                "cert": "cert.pem"
        }

        server = {
                "root": "/var/www/html"
        }

        php = {
                "port": 9000
        }

        database = {
                "name": "application",
                "username": "username",
                "password": "password"
        }

        templatesPath = f"{os.path.dirname(os.path.realpath(__file__))}/templates/laravel"

        """
        Run
        """

        check = Check(project["name"])

        check.projectName()
        check.projectExistence()

        Print.info("Creating the directory structure of project")
        DirectoryStructure({
            project["name"]: {
                "configuration": {
                    "nginx": {}
                },
                "certificate": {
                    "ssl": {}
                },
                "dockerfile": {
                    "php": {}
                },
                "application": {}
            }
        })
        Print.ok()
        Print.eol(2)

        Print.info("Going to the project root")
        with cd(project["name"]):
            with cd("certificate/ssl"):
                openssl = {
                        "imageName": "harivansh/laravel-docker-openssl"
                        "workingDirectory": "/certificates"
                }

                Print.info("Creating docker openssl image")
                Print.eol(2)
                run(["docker", "build", "--tag", openssl["imageName"],
                                        "-"
                ], input=str(
                    Template(f"{templatesPath}/openssl-dockerfile.template").replace({
                        "workingDirectory": openssl["workingDirectory"]
                })), encoding="ascii", check=True)

                Print.eol()
                Print.success("Created docker openssl image")
                Print.eol(2)

                Print.info("Generating ssl certificates")
                Print.eol(2)
                run(["docker", "run", "--rm",
                                      "--interactive",
                                      "--tty",
                                      "--mount", f"type=bind,source={os.getcwd()},target={openssl['workingDirectory']}",
                                      "--user", f"{user['id']}:{group['id']}",
                                      openssl["imageName"], "req", "-x509",
                                                            "-newkey",
                                                            "rsa:4096",
                                                            "-keyout", ssl["key"],
                                                            "-out", ssl["cert"],
                                                            "-days", "365",
                                                            "-nodes",
                                                            "-sha256",
                                                            "-subj", ("/C=MU"
                                                                      "/ST=Pamplemousses"
                                                                      "/L=Piton"
                                                                      "/O=Redshift"
                                                                      "/OU=IT"
                                                                      f"/CN={project['uri']}")
                ], check=True)
                Print.eol()
                Print.success("SSL certificates generated")
                Print.eol(2)

            Print.info("Generating the nginx configuration file")
            with cd("configuration/nginx"):
                Template(f"{templatesPath}/nginx.conf.template").replace({
                    "projectUri": project["uri"],
                    "sslCertPath": f"{ssl['path']}/{ssl['cert']}",
                    "sslKeyPath": f"{ssl['path']}/{ssl['key']}",
                    "serverRoot": server["root"],
                    "phpFpmPort": php["port"]
                }).write(f"{project['uri']}.conf")
            Print.ok()
            Print.eol(2)

            Print.info("Generating the php dockerfile")
            with cd("dockerfile/php"):
                Template(f"{templatesPath}/php-dockerfile.template").replace({
                    "userId": user["id"],
                    "groupId": group["id"]
                }).write("Dockerfile")
            Print.ok()
            Print.eol(2)

            Print.info("Generating docker-compose file")
            Template(f"{templatesPath}/docker-compose.yml.template").replace({
                "projectUri": project["uri"],
                "projectName": project["name"],
                "serverRoot": server["root"],
                "sslPath": ssl["path"],
                "userId": user["id"],
                "groupId": group["id"],
                "databaseName": database["name"],
                "databaseUsername": database["username"],
                "databasePassword": database["password"]
            }).write("docker-compose.yml")
            Print.ok()
            Print.eol(2)

            Print.info("Generating the run binary")
            Template(f"{templatesPath}/run.template").replace({
                "userId": user["id"],
                "groupId" group["id"],
                "projectName": project["name"]
            }).write("run")
            os.chmod("run", os.stat("run").st_mode | stat.S_IEXEC)
            Print.ok()
            Print.eol(2)

            Print.info("Pulling a fresh laravel application")
            Print.eol(2)
            with cd("application"):
                run(["docker", "run", "--rm",
                                      "--interactive",
                                      "--tty",
                                      "--user", f"{user['id']}:{group['id']}",
                                      "--workdir", "/application",
                                      "--mount", f"type=bind,source={os.getcwd()},target=/application",
                                      "composer", "create-project", "--prefer-dist",
                                                                    "--ignore-platform-reqs",
                                                                    "laravel/laravel", project["name"]
                ])
            Print.eol()
            Print.success("Pulled a fresh laravel application")
            Print.eol(2)

            Print.info("Initializing a git repository for project")
            Git.init()
            Print.ok()
            Print.eol(2)

            # Get the application key
            with open(envFilePath) as envFile:
                for line in envFile:
                    if re.search("APP_KEY", line):
                        applicationKey = re.findall("APP_KEY=(.*)", line.strip())[0]
                        break

            Template(f"{templatesPath}/env.template").replace({
                "projectName": project["name"],
                "applicationKey": applicationKey,
                "projectUri": project["uri"],
                "databaseName": database["name"],
                "databaseUsername": database["username"],
                "databasePassword": database["password"]
            }).write(f"application/{project['name']}/.env")
