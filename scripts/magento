#! /usr/bin/env python


import os
import sys
import getpass
import argparse
from subprocess import run, Popen, PIPE, STDOUT

from modules.cd import cd
from modules.Git import Git
from modules.Print import Print
from modules.Utils import Check
from modules.Template import Template
from modules.DirectoryStructure import DirectoryStructure


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="A script the automate the installation of a Magento project.")
    subparsers = parser.add_subparsers(dest="actions")
    new_command = subparsers.add_parser("new", help="Install a new Magento application in the current directory")

    new_command.add_argument("name", help="The project name (should be PascalCased)")

    arguments = parser.parse_args()

    if arguments.actions == "new":

        """
        Variables
        """

        project = {
                "name": arguments.name,
                "uri": "magento.local",
                "port": 80
        }

        database = {
                "name": "magento",
                "username": "user",
                "password": "password"
        }

        user = {
                "id": os.geteuid(),
                "name": getpass.getuser()
        }

        group = {
                "id": os.getegid()
        }

        templatesPath = f"{os.path.dirname(os.path.realpath(__file__))}/templates/magento"
        configurationsPath = f"{os.path.dirname(os.path.realpath(__file__))}/configurations/magento"

        """
        Run
        """

        check = Check(project["name"])

        Print.eol()

        Print.info("Doing preliminary checks...")
        Print.eol(2)

        if not check.nameIsPascalCased():
            Print.error("The project name is not PascalCased")
            Print.eol(2)
            sys.exit(1)

        if check.projectExists():
            Print.error("Another project with the same name exists in the current directory")
            Print.eol(2)
            sys.exit(1)

        Print.info("Creating the directory structure of the project")
        DirectoryStructure({
            project["name"]: {
                "application": {},
                "configuration": {
                    "nginx": {}
                },
                "dockerfile": {
                    "php": {}
                }
            }
        })
        Print.ok()
        Print.eol(2)

        with cd(project["name"]):
            Print.info("Generating docker-compose file")
            Template(f"{templatesPath}/docker-compose.yml.template").replace({
                "projectName": project["name"],
                "databaseName": database["name"],
                "databaseUsername": database["username"],
                "databasePassword": database["password"]
            }).write("docker-compose.yml")
            Print.ok()
            Print.eol(2)

            Print.info("Generating PHP dockerfile")
            with cd("dockerfile/php"):
                Template(f"{templatesPath}/php-dockerfile.template").replace({
                    "userId": user["id"],
                    "groupId": group["id"]
                }).write("Dockerfile")
            Print.ok()
            Print.eol(2)

            Print.info("Generating nginx configuration file")
            with cd("configuration/nginx"):
                Template(f"{templatesPath}/nginx.conf.template").replace({
                }).write(f"{project['uri']}.conf")
            Print.ok()
            Print.eol(2)

            Print.info("Getting a fresh Magento application")
            Print.eol(2)
            with cd("application"):
                run(["docker", "run", "--rm",
                                      "--user", f"{user['id']}:{group['id']}",
                                      "--mount", f"type=bind,source={configurationsPath}/auth.json,target=/tmp/auth.json",
                                      "--mount", f"type=bind,source={os.getcwd()},target=/app",
                                      "composer", "create-project", "--ignore-platform-reqs",
                                                                    "--repository", "https://repo.magento.com/",
                                                                    "magento/project-community-edition",
                                                                    project["name"]])
            Print.eol(2)
            Print.success("Got a fresh Magento application")
            Print.eol(2)

            Print.info("Initializing a git repository for the project")
            Print.eol(2)
            Git.init()
            Print.eol(2)
            Print.success("Initialized a git repository for the project")
            Print.eol(2)

        Print.success(f"Your project will be available at: http://{project['uri']}{'' if project['port'] == 80 else ':' + str(project['port'])}")
        Print.eol(2)
