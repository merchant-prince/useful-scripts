#! /usr/bin/env python


import os
import sys
import getpass
import argparse
from subprocess import run, Popen, PIPE, STDOUT

from modules.cd import cd
from modules.Git import Git
from modules.Print import Print
from modules.Utils import Check
from modules.Template import Template
from modules.DirectoryStructure import DirectoryStructure


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="A script the automate the installation of a Prestashop project.")
    subparsers = parser.add_subparsers(dest="actions")
    new_command = subparsers.add_parser("new", help="Install a new Prestashop application in the current directory")

    new_command.add_argument("name", help="The project name (should be PascalCased)")

    arguments = parser.parse_args()

    if arguments.actions == "new":

        """
        Variables
        """

        project = {
                "name": arguments.name,
                "uri": "prestashop.local",
                "port": 80
        }

        database = {
                "name": "prestashop",
                "root": {
                    "password": "root_password"
                },
                "username": "user",
                "password": "password",
                "prefix": "ps_"
        }

        administrator = {
                "mail": "hello@harivan.sh",
                "password": "password"
        }

        user = {
                "name": getpass.getuser()
        }

        templatesPath = f"{os.path.dirname(os.path.realpath(__file__))}/templates/prestashop"

        """
        Run
        """

        check = Check(project["name"])

        Print.info("Checking project's base criteria...")
        Print.eol(2)

        if not check.nameIsPascalCased():
            Print.error("The project name is not PascalCased")
            Print.eol(2)
            sys.exit(1)

        if check.projectExists():
            Print.error("Another project with the same name exists in the current directory")
            Print.eol(2)
            sys.exit(1)

        Print.info("Creating the directory structure of the project")
        DirectoryStructure({
            project["name"]: {
                "application": {
                    project["name"]: {}
                }
            }
        })
        Print.ok()
        Print.eol(2)

        Print.info("Going to the project root")
        Print.eol(2)
        with cd(project["name"]):
            Print.info("Generating docker-compose file")
            Template(f"{templatesPath}/docker-compose.yml.template").replace({
                "projectName": project["name"],
                "projectPort": project["port"],
                "projectUri": project["uri"],
                "databaseName": database["name"],
                "databaseUsername": database["username"],
                "databasePassword": database["password"],
                "databaseRootPassword": database["root"]["password"],
                "databasePrefix": database["prefix"],
                "administratorMail": administrator["mail"],
                "administratorPassword": administrator["password"]
            }).write("docker-compose.yml")
            Print.ok()
            Print.eol(2)

            Print.info("Getting a fresh Prestashop application")
            Print.eol(2)
            process = Popen(["docker-compose", "up"], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

            for line in process.stdout:
                if "Command line: 'apache2 -D FOREGROUND'" in line:
                    process.terminate()
                    break
            Print.success("Got a fresh Prestashop application")
            Print.eol(2)

            Print.info("Setting ACLs on the Prestashop application files")
            Print.eol(2)
            with cd("application"):
                run(["sudo", "setfacl", "-R", "-m", f"u:{user['name']}:rwx", f"{os.getcwd()}/{project['name']}"])
            Print.info("Setting ACLs on the Prestashop application files")
            Print.eol(2)
            Print.success("ACLs set on the Prestashop application files")
            Print.eol(2)

            Print.info("Initializing a git repository for the project")
            Print.eol(2)
            Git.init()
            Print.eol(2)
            Print.success("Initialized a git repository for the project")
            Print.eol(2)

        Print.success(f"Your Prestashop project will be available at: http://{project['uri']}{'' if project['port'] == 80 else ':' + str(project['port'])}")
        Print.eol(2)
