#! /usr/bin/env python


import os
import getpass
import argparse
from subprocess import run, Popen, PIPE, STDOUT

from modules.cd import cd
from modules.Git import Git
from modules.Print import Print
from modules.Utils import Check
from modules.Template import Template
from modules.DirectoryStructure import DirectoryStructure


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="A script the automate the installation of a Wordpress project.")
    subparsers = parser.add_subparsers(dest="actions")
    new_command = subparsers.add_parser("new", help="Install a new Wordpress application in the current directory")

    new_command.add_argument("name", help="The project name (should be PascalCased)")

    arguments = parser.parse_args()

    if arguments.actions == "new":

        """
        Variables
        """

        project = {
                "name": arguments.name,
                "uri": "wordpress.local",
                "port": 80
        }

        database = {
                "name": "wordpress",
                "username": "user",
                "password": "password"
        }

        user = {
                "name": getpass.getuser()
        }

        templatesPath = f"{os.path.dirname(os.path.realpath(__file__))}/templates/wordpress"

        Print.eol()

        check = Check(project["name"])

        if not check.nameIsPascalCased():
            Print.error("The project name is not PascalCased")
            Print.eol(2)
            sys.exit(1)

        if check.projectExists():
            Print.error("Another project with the same name exists in the current directory")
            Print.eol(2)
            sys.exit(1)

        Print.info("Creating the directory structure of the project")
        DirectoryStructure({
            project["name"]: {
                "application": {
                    project["name"]: {}
                }
            }
        })
        Print.ok()
        Print.eol(2)

        with cd(project["name"]):
            Print.info("Generating the docker-compose.yml file")
            Template(f"{templatesPath}/docker-compose.yml.template").replace({
                "projectName": project["name"],
                "projectUri": project["uri"],
                "projectPort": project["port"],
                "databaseName": database["name"],
                "databaseUsername": database["username"],
                "databasePassword": database["password"]
            }).write("docker-compose.yml")
            Print.ok()
            Print.eol(2)

            Print.info("Getting a fresh Wordpress application")
            Print.eol(2)
            with cd(f"application/{project['name']}"):
                process = Popen(["docker", "run", "--rm",
                                                  "--workdir", "/application",
                                                  "--mount", f"type=bind,source={os.getcwd()},target=/application",
                                                  "wordpress"
                                ], stdout=PIPE, stderr=STDOUT, bufsize=1, universal_newlines=True)

                for line in process.stdout:
                    if "Complete! WordPress has been successfully copied" in line:
                        process.terminate()
                        break
            Print.success("Got a fresh Wordpress application")
            Print.eol(2)

            Print.info("Setting ACLs on the Wordpress application files")
            Print.eol(2)
            with cd(f"application"):
                run(["sudo", "setfacl", "-R", "-m", f"u:{user['name']}:rwx", f"{os.getcwd()}/{project['name']}"])
            Print.success("ACLs set on the Wordpress application files")
            Print.eol(2)

            Print.info("Initializing git repository for project")
            Print.eol(2)
            Git.init()
            Print.eol(2)
            Print.success("Initialized git repository for project")
            Print.eol(2)

            Print.success(f"Your project will be available at: http://{project['uri']}{'' if project['port'] == 80 else ':' + str(project['port'])}")
            Print.eol(2)
